.switch-mode-button {
  background-color: $font-color;
  height: 2em;
  width: 5em;
  position:absolute;
  top: 38%;
  right: -2.5em;
  display:flex;
  justify-content: center;
  align-items: center;
  white-space: nowrap;
}

.switch-mode-button p {
  color: $background-color;
  font-weight: bold;
  font-size: 1.2rem;
}

.switch-mode-button:hover {
  right: 0
}

body {
    font-family: "Lucida Console", "Courier New", monospace;
    font-size: 1.5rem;
    background-color: $background-color;
    color: $font-color;
}

.text {
  text-shadow: 0 0 2px $background-color;
}

.title { 
    font-weight: bold;
    font-size: 3.5rem;
    @media only screen and (max-width: 480px) {
      font-size: 2.5rem;
    }
}

.sub-title { 
    font-weight: bold;
    font-size: 2.5rem;
    @media only screen and (max-width: 480px) {
      font-size: 1.6rem;
    }
}

.pixel-box {
  position: flex;
  height: 100%;
}

.contact-box {
    font-size: 1.5em;
    align-items: flex-end;
    display: flex;
    flex-direction: column;
    align-self: flex-end;
    order: 1;
    padding-bottom: 50px;
    @media only screen and (max-width: 480px) {
      font-size: 1em;
      // padding-bottom: 0px;
    }
}

h3 {
  @media only screen and (max-width: 480px) {
    margin: 5px 0 5px 0;
  }
}

.star {
  position: absolute;
  z-index: -1;
}

.projects-box a:hover {
    /* maybe make it glow */
    /* font-size: 2.2rem; */
}

.projects-box {
    display: flex;
    flex-direction: column;
    @media only screen and (max-width: 480px) {
      padding-bottom: 50px;
    }
}

.main {
    width: 100%;
    height: 97vh;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    z-index: 1000;
    justify-content: space-between;
    @media only screen and (max-width: 480px) {
      flex-direction: column-reverse;
    }
}

@import "../../node_modules/compass-mixins/lib/compass/css3";

$required-properties: (id, frames, colors);
$default-settings: (
  pixel-size: 10px, // Pixel size
  padding: 0, // Space between pixels
  speed: 1s, // Frame speed
  offset: 1
);

@function strip-zero-unit($number) {
  @return if($number == 0, 0, $number);
}

@mixin setup-pixels($id, $frames, $colors, $pixel-size, $padding, $speed, $offset) {
  $width: str-length(nth(nth($frames, 1), 1));
  $height: length($frames);
  width: $width * ($pixel-size + $padding) - $padding;
  height: $height * ($pixel-size + $padding) - $padding;
  position: relative;

  &::after {
    content: "";
    width: $pixel-size;
    height: $pixel-size;
    display: block;
    left: -$pixel-size; // Correct for offset
    position: absolute;
  }
}

@mixin draw-frame($frames, $colors, $pixel-size, $padding, $index: 1) {
  $box-shadow: ();
  @for $i from 1 through length($frames) {
    $row: nth(nth($frames, $i), $index);
    @for $j from 1 through str-length($row) {
      $pixel: str-slice($row, $j, $j);
      $color: map-get($colors, $pixel);
      @if $color != transparent and $color != null {
        $x: ($j - 1) * ($pixel-size + $padding) + $pixel-size; // Offset to the right by one pixel so pixel (0, 0) isn't covered up
        $y: ($i - 1) * ($pixel-size + $padding);
        $box-shadow: append($box-shadow, strip-zero-unit($x) strip-zero-unit($y) $color, comma);
      }
    }
  }
  @include box-shadow($box-shadow);
}

@mixin draw-frames($id, $frames, $colors, $pixel-size, $padding, $speed, $offset) {
  $frame-count: length(nth($frames, 1));
  $starting-frame: random($limit: $frame-count);

  @if ($frame-count == 1) {
    @include draw-frame($frames, $colors, $pixel-size, $padding);
  }
  @else {
    animation: #{$id}-frames $frame-count * $speed * $offset steps(1) infinite;
    @keyframes #{$id}-frames {
      @for $i from 1 through $frame-count {
        #{calc(100% / $frame-count) * ($i - 1)} {
          @include draw-frame($frames, $colors, $pixel-size, $padding, $i);
        }
      }
    }
  }
}

@mixin pixel-art-item($id, $data) {
  $data: map-merge(map-merge($default-settings, $data), (id: $id));

  @each $property in $required-properties {
    @if not map-has-key($data, $property) {
      @error "The property `#{$property}` is required";
    }
  }

  ##{$id} {
    @include setup-pixels($data...);
    &::after {
      @include draw-frames($data...);
    }
  }
}

@mixin pixel-art($pixel-art, $settings: ()) {
  @each $id, $data in $pixel-art {
    @include pixel-art-item($id, map-merge($settings, $data));
  }
}

  $tiny-star: (
    frames: (
    "oeo""ooo",
    "eae""odo",
    "oeo""ooo"
    ),
    colors: $pixel-color-map,
    speed: 1.25s
  );
  // $med-star: (
  //   frames: (
  //     "ooeoo""ooooo""ooooo""ooooo""ooooo""ooooo",
  //     "oefeo""oefeo""oocoo""ooeoo""oocoo""oefeo",
  //     "efafe""ofafo""ocbco""oeceo""ocbco""ofafo",
  //     "oefeo""oefeo""oocoo""ooeoo""oocoo""oefeo",
  //     "ooeoo""ooooo""ooooo""ooooo""ooooo""ooooo"
  //   ),
  //   colors: $pixel-color-map,
  //   speed: 1s,
  // );
  $slow-med-star: (
    frames: (
      "ooeoo""ooeoo""ooooo""ooooo""ooooo""ooooo""ooooo",
      "oefeo""oefeo""oefeo""oocoo""ooeoo""oocoo""oefeo",
      "efafe""efafe""ofafo""ocbco""oeceo""ocbco""ofafo",
      "oefeo""oefeo""oefeo""oocoo""ooeoo""oocoo""oefeo",
      "ooeoo""ooeoo""ooooo""ooooo""ooooo""ooooo""ooooo"
    ),
    colors: $pixel-color-map,
    speed: 1s,
  );
  // $little-star: (
  //   frames: (
  //     "ece""ece""odo""oeo""odo",
  //     "cac""cac""dfd""ece""dfd",
  //     "ece""ece""odo""oeo""odo"
  //   ),
  //   colors: $pixel-color-map,
  //   speed: .75s
  // );
  $slow-little-star: (
    frames: (
      "ece""ece""odo""oeo""odo",
      "cac""cac""dfd""ece""dfd",
      "ece""ece""odo""oeo""odo"
    ),
    colors: $pixel-color-map,
    speed: 1s
  );

  $moon: (
    frames: (
      "oooooooooooooooooooooooooo""ooooodoooooooooooooooooooo",
      "ooooocooooooccccoooooooooo""oooodbdooooooooooooooooooo",
      "oooooooooooocbbbcoooooodoo""ooooodooooooccccoooooooooo",
      "oooooooooooocbbbbcoooodbdo""oooooooooooocbbbcoooooocoo",
      "ooooooooooooocbbbbcoooodoo""oooooooooooocbbbbcoooooooo",
      "ooooooooooooocbbbbcooooooo""ooooooooooooocbbbbcooooooo",
      "ooooooccooooocbbbbcooooooo""ooooooooooooocbbbbcooooooo",
      "oooooocbcooocbbbbbcooooooo""ooooooccooooocbbbbcooooooo",
      "oooooocbbcccbbbbbbcooooooo""oooooocbcooocbbbbbcooooooo",
      "oooooocbbbbbbbbbbbcooooooo""oooooocbbcccbbbbbbcooooooo",
      "oooooocbbbbbbbbbbcoooooooo""oooooocbbbbbbbbbbbcooooooo",
      "ooboooocbbbbbbbbcooooooooo""oocooocbbbbbbbbbbcoodooooo",
      "ooooooooccbbbbbcoooocooooo""ooooooocbbbbbbbbcoodbdoooo",
      "oooooooooccccccooooooooooo""ooooooooccbbbbbcoooodooooo",
      "oooooooooooooooooooooooooo""oooooooooccccccooooooooooo"
    ),
    colors: $pixel-color-map,
    speed: 1.5s
  );

  $ground: (
    frames: (
      "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb",
      "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb",
      "ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc",
      "eeecceeeeccccceeeeeeccceeeeececceeeeeeecceeeeccccceeeeeeccceeeeececceeeeeeecceeeeccccceeeeeeccceeeeececceeeeeeecceeeeccccceeeeeeccceeeeececceeeeeeecceeeeccccceeeeeeccceeeeececceeeecceeeeccccceeeeeeccceeeeececceeeecceeeeccccceeeeeeccceeeeececceeeecceeeeccccceeeeeeccceeeeececceeee",
      "eeeeceeeeecccceeeeeeceeeeeeeeeeceeeeeeeeceeeeecceceeeeeeceeeeeeeeeeceeeeeeeeceeeeeccceeeeeeeceeeeeeeeeceeeeeeeeeceeeeeceeceeeeeeceeeeeeeeeeceeeeeeeeceeeeecccceeeeeeceeeeeeeeeeceeeeeceeeeecccceeeeeeceeeeeeeeeeceeeeeceeeeececceeeeeeceeeeeeeeeeceeeeeceeeeecccceeeeeeceeeeeeeeeeceeee",
      "eeeeeeeeeeeeeceeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeceeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeceeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeecceeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee",
      "eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee"
    ),
    colors: $pixel-color-map
  );

@include pixel-art((
  tiny-star: $tiny-star,
  // little-star: $little-star,
  slow-little-star: $slow-little-star,
  // med-star: $med-star,
  slow-med-star: $slow-med-star,
  ground: $ground,
  moon: $moon
), (
  pixel-size: $pixel-size
));