body {
    font-family: "Lucida Console", "Courier New", monospace;
    font-size: 1.5rem;
    /* margin: 0 */
}
//TODO2 add offset to animation start
//TODO2 add random frame select on render
.title { 
    font-weight: bold;
    font-size: 3rem;
}

.sub-title { 
    font-weight: bold;
    font-size: 2rem
}


.contact-box {
    font-size: 2rem;
    align-items: flex-end;
    display: flex;
    flex-direction: column;
    align-self: flex-end;
    order: 1
}

.projects-box a:hover {
    /* maybe make it glow */
    /* font-size: 2.2rem; */
}

.projects-box {
    display: flex;
    flex-direction: column;
}

.main {
    width: 100%;
    height: 97vh;
    display: flex;
    align-items: flex-start;
    justify-content: space-between;
}

@import "../../node_modules/compass-mixins/lib/compass/css3";

$required-properties: (id, frames, colors);
$default-settings: (
  pixel-size: 10px, // Pixel size
  padding: 0, // Space between pixels
  speed: .25s, // Frame speed
  offset: 1
);

@function strip-zero-unit($number) {
  @return if($number == 0, 0, $number);
}

@mixin setup-pixels($id, $frames, $colors, $pixel-size, $padding, $speed, $offset) {
  $width: str-length(nth(nth($frames, 1), 1));
  $height: length($frames);
  width: $width * ($pixel-size + $padding) - $padding;
  height: $height * ($pixel-size + $padding) - $padding;
  position: relative;

  &::after {
    content: "";
    width: $pixel-size;
    height: $pixel-size;
    display: block;
    left: -$pixel-size; // Correct for offset
    position: absolute;
  }
}

@mixin draw-frame($frames, $colors, $pixel-size, $padding, $index: 1) {
  $box-shadow: ();
  @for $i from 1 through length($frames) {
    $row: nth(nth($frames, $i), $index);
    @for $j from 1 through str-length($row) {
      $pixel: str-slice($row, $j, $j);
      $color: map-get($colors, $pixel);
      @if $color != transparent and $color != null {
        $x: ($j - 1) * ($pixel-size + $padding) + $pixel-size; // Offset to the right by one pixel so pixel (0, 0) isn't covered up
        $y: ($i - 1) * ($pixel-size + $padding);
        $box-shadow: append($box-shadow, strip-zero-unit($x) strip-zero-unit($y) $color, comma);
      }
    }
  }
  @include box-shadow($box-shadow);
}

@mixin draw-frames($id, $frames, $colors, $pixel-size, $padding, $speed, $offset) {
  $frame-count: length(nth($frames, 1));
  $starting-frame: random($limit: $frame-count);

  @if ($frame-count == 1) {
    @include draw-frame($frames, $colors, $pixel-size, $padding);
  }
  @else {
    //TODO google css start at random keyframe
    animation: #{$id}-frames $frame-count * $speed * $offset steps(1) infinite;
    @keyframes #{$id}-frames {
      @for $i from 1 through $frame-count {
        #{100% / $frame-count * ($i - 1)} {
          @include draw-frame($frames, $colors, $pixel-size, $padding, $i);
        }
      }
    }
  }
}

@mixin pixel-art-item($id, $data) {
  $data: map-merge(map-merge($default-settings, $data), (id: $id));

  @each $property in $required-properties {
    @if not map-has-key($data, $property) {
      @error "The property `#{$property}` is required";
    }
  }

  ##{$id} {
    @include setup-pixels($data...);
    &::after {
      @include draw-frames($data...);
    }
  }
}

@mixin pixel-art($pixel-art, $settings: ()) {
  @each $id, $data in $pixel-art {
    @include pixel-art-item($id, map-merge($settings, $data));
  }
}

$pixel-size: 8px;

// $pixel-color-map: (
//   'a': #000000,
//   'b': #333333,
//   'f': #444444,
//   'c': #888888,
//   'd': #aaaaaa,
//   'e': #cccccc,
//   'o': transparent
// );

//TODO smooth transitions between frames

  $tiny-star: (
    frames: (
    "oeo""ooo",
    "eae""odo",
    "oeo""ooo"
    ),
    colors: (
      'a': #000000,
      'c': #888888,
      'e': #cccccc,
      'd': #aaaaaa,
      'o': transparent
    ),
    speed: 4s
  );
  $med-star: (
    frames: (
      "ooeoo""ooooo""ooooo""ooooo""ooooo""ooooo",
      "oefeo""oefeo""oocoo""ooeoo""oocoo""oefeo",
      "efafe""ofafo""ocbco""oeceo""ocbco""ofafo",
      "oefeo""oefeo""oocoo""ooeoo""oocoo""oefeo",
      "ooeoo""ooooo""ooooo""ooooo""ooooo""ooooo"
    ),
    colors: (
      'a': #000000,
      'c': #888888,
      'b': #333333,
      'f': #444444,
      'e': #cccccc,
      'o': transparent
    ),
    speed: 2.75s,
    offset: 1,
  );
  $little-star: (
    frames: (
      "ece""odo""oeo""odo",
      "cac""dfd""ece""dfd",
      "ece""odo""oeo""odo"
    ),
    colors: (
      'a': #000000,
      'd': #aaaaaa,
      'b': #333333,
      'f': #444444,
      'c': #888888,
      'e': #cccccc,
    ),
    speed: 2s
  );

@include pixel-art((
  tiny-star: $tiny-star,
  little-star: $little-star,
  med-star: $med-star
), (
  pixel-size: $pixel-size
));